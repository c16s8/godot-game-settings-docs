{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Godot Game Settings documentation. If you're using GGS for the first time, start at Getting Started.</p> <p>View Settings and Components for information about the pre-built settings and components that come with GGS.</p> <p>Note</p> <p>To view the documentation for previous versions (3.2 and before) view the github repository. You can access the documentation repo using the \"Github\" button at the top-right of the page.</p>"},{"location":"components/","title":"Components","text":""},{"location":"components/#apply-button","title":"Apply Button","text":"<p>Calls <code>apply_setting()</code> on all components that are in a specific node group.</p>"},{"location":"components/#arrow-list","title":"Arrow List","text":"<p>A list that allows cycling through options using two arrows on the left and right. Compatible with <code>int</code> and <code>bool</code> settings.</p>"},{"location":"components/#binary-selection","title":"Binary Selection","text":"<p>Consists of multiple components that all do the same thing. Checkbox, Switch, and Toggle Button are all binary selection components that simply toggle between a true/false state. Compatible with <code>bool</code> settings.</p>"},{"location":"components/#input-button","title":"Input Button","text":"<p>Displays the current value of the assigned input setting and rebinds it when interacted with. Only compatible with <code>SettingInput</code> (it technically handles <code>Array</code> since input events are serialized into arrays when saving them).</p> <p>Several global properties can be adjusted in plugin preferences.</p>"},{"location":"components/#option-list","title":"Option List","text":"<p>A drop-down menu that allows the selection of one option. Compatible with <code>int</code>.</p>"},{"location":"components/#radio-list","title":"Radio List","text":"<p>A group of buttons. Only one button can be selected at a time. You can add <code>Buttons</code> or <code>CheckButtons</code> to the active list. All buttons must have <code>toggle_mode</code> enabled. The index of the button node in the active list is the index of the option (e.g. the first button is <code>0</code>, the second one is <code>1</code>, and so on). Compatible with <code>int</code>.</p>"},{"location":"components/#reset-button","title":"Reset Button","text":"<p>Calls <code>reset_setting()</code> on all components that are in a specific node group.</p>"},{"location":"components/#slider","title":"Slider","text":"<p>A slider for choosing a number in a certain range. Edit the child <code>HSlider</code> to edit range, step, etc. Compatible with <code>int</code> and <code>float</code>.</p>"},{"location":"components/#spinbox","title":"SpinBox","text":"<p>A text field that only accepts numbers. Edit the child <code>SpinBox</code> to edit range, step, etc. Compatible with <code>int</code> and <code>float</code>.</p>"},{"location":"components/#text-field","title":"Text Field","text":"<p>A simple text field. Compatible with <code>String</code>.</p>"},{"location":"custom_components/","title":"Custom Components","text":"<p>You can create your own custom components and use them just like the premade ones. Components use a property simply called <code>value</code> to keep track of the current setting value. For example, in a simple Toggle Button, this <code>value</code> can either be <code>true</code> or <code>false</code> and it corresponds to the toggle state of the button.</p> <p>When the user interacts with the component (in this example, toggles the button), the <code>value</code> is updated. Then, if apply on changed is enabled, the setting is applied.</p>"},{"location":"custom_components/#creating-the-component-scene","title":"Creating the Component Scene","text":"<p>Components can be stored anywhere as they're just scenes that are instantied. All default components that come with GGS are located at <code>res://ggs/components</code>. It is recommended to keep your own components in this directory as well.</p> <p>To begin, create a new scene. You can add any control nodes you need to this scene, however the root node must be a <code>MarginContainer</code>.</p>"},{"location":"custom_components/#adding-the-main-script","title":"Adding the Main Script","text":"<p>The main script should be assigned to the root <code>MarginContainer</code> node and it must fulfil the following requirements:</p> <ul> <li>It must be a <code>@tool</code> script. This allows the component to send configuration warnings.</li> <li>It must extend <code>GGSComponent</code>.</li> <li>When the user interacts with the component (such as toggling a button, changing a slider value, etc.), it should update the <code>value</code> property and call <code>apply_setting()</code> if apply on changed is enabled. Use <code>can_apply_on_changed()</code> to do the check.</li> <li>When overriding <code>reset_setting()</code>, you must first call the parent method using <code>super()</code>.</li> <li>When overriding <code>_ready()</code>, you must define <code>compatible_types</code> of the component.</li> <li>To prevent the nodes from running their setting-related code in the editor, use <code>Engine.is_editor_hint()</code> as a guard clause.</li> </ul> <pre><code>compatible_types = [TYPE_BOOL, TYPE_INT]\nif Engine.is_editor_hint():\n  return\n</code></pre> <p>After the above guard clause, you should get the current value of the setting in <code>_ready()</code>. To load setting values from disc, use <code>GGSSaveManager.load_setting_value()</code>. Don't forget to update the display elements of the component as well so it actually shows the current value of the setting.</p>"},{"location":"custom_components/#class-methods","title":"Class Methods","text":"<p>The following methods come from the base <code>GGSComponent</code> class and can be used or overridden when necessary. When overiding them, you must also call the parent method using <code>super()</code>.</p>"},{"location":"custom_components/#apply_setting","title":"apply_setting()","text":"<p>Saves the setting value to the save file and executes the setting logic. You don't generally need to override this, simply call it when you want the component to apply the setting. Always check if apply on changed is enabled before doing so. You can use <code>can_apply_on_changed()</code> method to do the check.</p> <p>This method is also called when a relevant Apply Button is pressed.</p>"},{"location":"custom_components/#reset_setting","title":"reset_setting()","text":"<p>Resets the setting value back to its default and executes the setting logic. You should override this and update your component state in it.</p> <p>This method is called when a relevant Reset Button is pressed.</p> <p>Tip</p> <p>You can check the script for prebuilt components that come with GGS for some examples.</p>"},{"location":"custom_settings/","title":"Custom Settings","text":"<p>You are not limited to the settings that come with the plugin as GGS allows you to create your own custom settings.</p>"},{"location":"custom_settings/#creating-a-setting-script","title":"Creating a Setting Script","text":"<p>The setting script is where you can define your setting properties and its logic. The script must fulfil certain requirements, including:</p> <ul> <li>It must be a tool script (put <code>@tool</code> at the top of the script).</li> <li>It must extend the <code>GGSSetting</code> class.</li> <li>It is recommended to have a class name, and be prefixed with \"Setting\" (e.g. <code>class_name SettingFoobar</code>).</li> <li>It must override <code>_init()</code> and set the <code>type</code> and <code>default</code> properties. The <code>default</code> property is the default value of the setting, and <code>type</code> is its type (corresponding to an engine type such as <code>TYPE_INT</code> or <code>TYPE_FLOAT</code>).</li> <li>Have a method named <code>apply()</code> that takes a single argument. Whenever the setting needs to be applied, this method is called and the new setting value is passed to it.</li> </ul>"},{"location":"custom_settings/#customizing-default-export","title":"Customizing Default Export","text":"<p>As mentioned, you must define <code>default</code> and <code>type</code> properties of the setting in <code>_init()</code>. You can also override other properties that may be useful depending on the type of setting you're making. These properties include:</p> PROPERTY DESCRIPTION hint The property hint for <code>default</code>. Use this to customize how the property is exported in the editor. hint_string The hint string for the property hint. Always used alongside specific <code>hint</code> values. section The sectio name used to save and load the setting from the disc."},{"location":"custom_settings/#adding-logic","title":"Adding Logic","text":"<p>The logic, or in other words, what actually happens when the setting needs to be applied, goes in the <code>apply()</code> method. Note that the type of value <code>apply()</code> accepts should be the same type defined in <code>type</code>.</p> <p>Remember that you can define methods or set additional properties like any script. As long as your script fulfils the aforementioned requirements, it's a valid setting script.</p> <p>Once you've finish your script, you can create a new instance of it via the new resource window.</p> <p>Tip</p> <p>For more information about how to use <code>hint</code> and <code>hint_string</code>, check <code>_get_property_list()</code> on the Godot documentation.</p> <p>Tip</p> <p>You can check the prebuilt settings that come with GGS for practical examples of a setting script. They're located at <code>res://ggs/scripts</code> by default</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>This quick guide will walk you through creating a simple settings menu with pre-defined settings and components that come with GGS.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>You can install GGS through one of the following methods:</p> <ul> <li>Install the plugin via the Godot Asset Library, also available inside the Godot editor.</li> <li>Download the latest release from Releases.</li> <li>Clone the Github repository.</li> </ul> <p>Once installed, enable the plugin from Project \u2192 Project Settings \u2192 Plugins.</p> <p>Warning</p> <p>The plugin may not work when first installed. GGS relies on a singleton to function. When the files are initially added, Godot may try to parse them while this singleton is yet to be added to the engine. Simply ignore the errors and enable the plugin. Ensure the singleton GGS is added to your Project Settings \u2192 Globals \u2192 Autoload.</p> <p>The singleton is added automatically when the plugin is enabled. If this does not happen, you can manually add the following scene and name it \"GGS\". Make sure you add the scene, not the script.</p> <p>Singleton Path: <code>res://addons/ggs/core/global_manager/global_manager.tscn</code></p>"},{"location":"getting_started/#how-it-works","title":"How it Works","text":"<p>GGS uses resources to store essential information about each game setting:</p> <ul> <li>The default value of the setting which can be almost any of the built-in engine types.</li> <li>The section and key names used to store the setting value on disc. Godot's own <code>ConfigFile</code> class is used to do this as it automatically converts Godot types when saving and loading data. The setting data is stored at <code>user://setting.cfg</code>. For more information about the user directory, view Data Paths on the official Godot documentation.</li> <li>The logic of the setting, as in, what should happen when the setting value is changed. This is a GDScript script assigned to the resources.</li> </ul> <p>Tip</p> <p>You can open your project's user directory from Project \u2192 Open User Data Folder.</p> <p>To allow the user to interact with settings and change their value, we need user interface elements. GGS provides several components that are simple prebuilt scenes. You can use these components to build a fully functioning in-game settings menu.</p> <p>These components are all <code>Control</code> nodes, hence they offer flexibility when designing your menu. You can customize them like any other node (e.g. change their size flags, theme, etc.). For more information on using themes, view GUI Skinning on the official Godot documentation.</p> <p>Tip</p> <p>You can access the plugin preferences by inspecting <code>plugin_settings.tres</code> located at <code>res://ggs</code>. Reload the singleton (disable/enable it through the Project Settings) after changing the <code>settings_dir</code> property.</p>"},{"location":"getting_started/#creating-a-setting","title":"Creating a Setting","text":"<p>When the game starts, the global manager (the GGS singleton) loads and applies the setting resources in a specific directory. This directory is called the \"settings directory\" and it can be changed in the plugin preferences. By default, it's <code>res://ggs/game_settings</code>.</p> <p>Note</p> <p>There may already be a <code>sample_setting.tres</code> in the settings directory. Feel free to delete that.</p> <p>As mentioned previously, settings are just simple resources. In the filesystem dock, right-click your settings directory and choose Create New \u2192 Resource.... In the newly opened window, search for the word \"setting\". Any resource class that starts with the prefix \"setting\" is a prebuilt setting that comes with GGS. This is simply a naming convention to make finding setting resources easier. From the list, choose settingDisplayMode. Give it an appropriate name and save it.</p> <p>Inspect the newly created setting resource to view its properties in the inspector. All settings have three main properties:</p> PROPERTY DESCRIPTION default This is the default value of this setting. section The section name that will be used to store the setting value. key The key name that will be used to store the setting value. <p>A setting can have an empty <code>section</code>, but not an empty <code>key</code>. If the <code>key</code> is empty, the setting's value will not be saved. Go ahead and give this setting an appropriate key name..</p> <p>Info</p> <p>While the prebuilt settings cover the very basic and general configurations of a game, it does not cover things specific to your own project. GGS supports creating your own custom settings. For more information, view Custom Settings.</p>"},{"location":"getting_started/#adding-a-component","title":"Adding a Component","text":"<p>Let's create a corresponding component for the setting we just created.</p> <p>Create a new scene and add a <code>Control</code> node as its root. As said before, GGS components are simply scenes that can be instantiated. So, open the instantiate window and search for \"component_option_list.tscn\". Similar to settings, all component scenes are prefixed with \"component\" to make finding them easier.</p> <p>Select the instantiated scene. Notice the <code>setting</code> property. This is the setting resource associated with the component. Assign the setting you created recently to the component by either drag-and-dropping the resource onto the <code>setting</code> property or choosing Quick Load....</p> <p>The root of all GGS components is a <code>MarginContainer</code>. To access the underlying nodes (the <code>OptionButton</code> in this case), you should enable Editable Children through the right-click menu. Now you can select the underlying Btn node and change any of its properties. For now, just enter an appropriate <code>text</code>.</p> <p>The display mode setting has three options. So let's add the options to the option button. Note that the order of the items must be the exact same as the order of them in the setting. Meaning, since the options in the setting are Fullscreen, Borderless, Windowed in that order, the option button items must be in that order as well. The display text can be anything however (e.g. it doesn't need to exactly say \"Fullscreen\" or \"Windowed\").</p> <p>Run the scene and change the setting. The game window should successfully change to the selected display mode.</p>"},{"location":"getting_started/#handling-sound-effects","title":"Handling Sound Effects","text":"<p>Components allow you to play a sound effect on specific events such as gaining focus or when they're interacted with. To assign audio files for these effects, open the global manager scene (<code>global_manager.tscn</code>) and set the properties of the desired <code>AudioStreamPlayer</code> nodes. If no audio is assigned to a player, it won't play any sound.</p>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>This was the core of making a setting and assigning it to a component. To create your setting menu, repeat the process for every setting your game has.</p> <p>Most properties and classes contain doc comments, meaning Godot can generate documentation for them. Try looking them up in the built-in documentation using F1. You can also check the references from the navigation panel to the left.</p> <p>View Custom Settings to learn how you can make your own settings. GGS also supports creating Custom Components.</p>"},{"location":"settings/","title":"Settings","text":""},{"location":"settings/#audio","title":"Audio","text":"<p>Changes common properties of a selected audio bus.</p>"},{"location":"settings/#mute","title":"Mute","text":"<p>Changes the <code>muted</code> state of the selected audio bus.</p> PROPERTY DESCRIPTION type bool default false audio_bus The audio bus to be affected."},{"location":"settings/#volume","title":"Volume","text":"<p>Changes the <code>volume</code> of the selected audio bus.</p> PROPERTY DESCRIPTION type float, range of [1.0, 100.0] default 80.0 audio_bus The audio bus to be affected."},{"location":"settings/#display","title":"Display","text":"<p>Changes common window and display properties.</p>"},{"location":"settings/#mode","title":"Mode","text":"<p>Changes display mode between fullscreen, borderless, and windowed.</p> PROPERTY DESCRIPTION type int, exported as an enum default 2 (Windowed) size_setting A setting that can handle window size. Used to set the game window to the correct size after state change. If not provided, the window size will not be updated when display mode changes. This is particularly important when the user changes the window size while the game is in fullscreen or borderless modes."},{"location":"settings/#scale","title":"Scale","text":"<p>Sets the window scale. The window will be resized by multiplying its dimensions by a flat number.</p> PROPERTY DESCRIPTION type int, index of an item from <code>scales</code> default 0 scales List of available scales. <p>Warning</p> <p>Remember that when making a component, the order of items in the component list must be the same as the order of items in the <code>scales</code> property.</p>"},{"location":"settings/#size","title":"Size","text":"<p>Sets the window size. The window will be resized by setting its size to provided values.</p> PROPERTY DESCRIPTION type int, index of an item from <code>sizes</code> default 0 scales List of available sizes. <p>Warning</p> <p>Remember that when making a component, the order of items in the component list must be the same as the order of items in the <code>sizes</code> property.</p>"},{"location":"settings/#max-fps","title":"Max FPS","text":"<p>Sets the maximum allowed FPS (frames-per-second) of the game.</p> PROPERTY DESCRIPTION type int default 60"},{"location":"settings/#vsync","title":"VSync","text":"<p>Changes VSync mode.</p> PROPERTY DESCRIPTION type int, exported as enum default 1 (Enabled)"},{"location":"settings/#input","title":"Input","text":"<p>Sets the input event of a specific input action (i.e. rebinds an input). The <code>default</code> property is read-only and is set automatically whenever you choose an <code>action</code> or <code>event_idx</code>.</p> PROPERTY DESCRIPTION type Array: [type, id, axis_dir] default Empty array, changing this value manually is not recommended action The action to be rebinded. event_index The index of the input event to be replaced. <p>Input events are serialized to arrays using <code>GGSInputUtils.serialize_event()</code>. The value of <code>default</code> is this array. The array structure is as follows:</p> <ul> <li>0, Event Type: The input event type (e.g. <code>InputEventkey</code>, <code>InputEventJoypadMotion</code>, etc.)</li> <li>1, Event Id: \"Id\" here refers to the identifying property that indicates what the actual input is. For each supported event type it's:<ul> <li>InputEventKey: <code>physical_keycode</code></li> <li>InputEventMouseButton: <code>button_index</code></li> <li>InputEventJoypadButton: <code>button_index</code></li> <li>InputEventJoypadMotion: <code>axis</code></li> </ul> </li> <li>2, Axis Direction: If the event is an <code>InputEventJoypadMotion</code>, the <code>axis_value</code> property of the event is stored here.</li> </ul> <p>When the stored value is loaded, the array is converted back to a valid input event using <code>GGSInputUtils.deserialize_event()</code>.</p>"}]}